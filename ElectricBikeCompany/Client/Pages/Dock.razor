@page "/dock"
@page "/dock/{id:guid}"
@inject IDockService DockService
@inject NavigationManager NavigationManager

@if (Id is null)
{
    <PageTitle>Create a new Dock</PageTitle>
    <h3>Create a new Dock</h3>
}
else
{
    <PageTitle>Edit @dock.Address</PageTitle>
}

<EditForm Model="dock" OnSubmit="HandleSubmit">
    <div>
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="dock.Address" class="form-control" />
    </div>
    <div>
        <label for="takenSpaces">Taken spaces</label>
        <InputNumber id="takenSpaces" @bind-Value="dock.Taken_spaces" class="form-control" />
    </div>
    <div>
        <label for="capacity">Capacity</label>
        <InputNumber id="capacity" @bind-Value="dock.Capacity" class="form-control" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger"
            @onclick="DeleteDock">
        Delete Dock
    </button>
</EditForm>

@code {
    
    [Parameter]
    public Guid? Id { get; set; }
    string btnText = string.Empty;
    private Guid? selectedBusId;
    private Guid emptyGuid = Guid.Empty;

    ElectricBikeCompany.Shared.Dock dock =
        new ElectricBikeCompany.Shared.Dock{
            Address = "Address",
            Taken_spaces = 0,
            Capacity = 99
        };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Dock" : "Update Dock";
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await DockService.GetDockById((Guid)Id);
            if (result is not null)
            {
                dock = result;
            }
            else
            {
                NavigationManager.NavigateTo("/dock");
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await DockService.CreateDock(dock);
        }
        else
        {
            await DockService.UpdateDock((Guid)Id, dock);
            NavigationManager.NavigateTo("/docks");
        }
    }

    async Task DeleteDock()
    {
        await DockService.DeleteDock(dock.Id);
    }
}